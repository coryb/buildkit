// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: ttyproxy.proto

package ttyproxy

import (
	bytes "bytes"
	context "context"
	fmt "fmt"
	proto "github.com/gogo/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
	math_bits "math/bits"
	reflect "reflect"
	strings "strings"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type BytesMessage struct {
	Data []byte `protobuf:"bytes,1,opt,name=data,proto3" json:"data,omitempty"`
}

func (m *BytesMessage) Reset()      { *m = BytesMessage{} }
func (*BytesMessage) ProtoMessage() {}
func (*BytesMessage) Descriptor() ([]byte, []int) {
	return fileDescriptor_c71a6b2c39852c39, []int{0}
}
func (m *BytesMessage) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *BytesMessage) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_BytesMessage.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *BytesMessage) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BytesMessage.Merge(m, src)
}
func (m *BytesMessage) XXX_Size() int {
	return m.Size()
}
func (m *BytesMessage) XXX_DiscardUnknown() {
	xxx_messageInfo_BytesMessage.DiscardUnknown(m)
}

var xxx_messageInfo_BytesMessage proto.InternalMessageInfo

func (m *BytesMessage) GetData() []byte {
	if m != nil {
		return m.Data
	}
	return nil
}

type ResizeRequest struct {
}

func (m *ResizeRequest) Reset()      { *m = ResizeRequest{} }
func (*ResizeRequest) ProtoMessage() {}
func (*ResizeRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_c71a6b2c39852c39, []int{1}
}
func (m *ResizeRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ResizeRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ResizeRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ResizeRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ResizeRequest.Merge(m, src)
}
func (m *ResizeRequest) XXX_Size() int {
	return m.Size()
}
func (m *ResizeRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_ResizeRequest.DiscardUnknown(m)
}

var xxx_messageInfo_ResizeRequest proto.InternalMessageInfo

type ResizeResponse struct {
	Rows    uint32 `protobuf:"varint,1,opt,name=rows,proto3" json:"rows,omitempty"`
	Columns uint32 `protobuf:"varint,2,opt,name=columns,proto3" json:"columns,omitempty"`
	X       uint32 `protobuf:"varint,3,opt,name=x,proto3" json:"x,omitempty"`
	Y       uint32 `protobuf:"varint,4,opt,name=y,proto3" json:"y,omitempty"`
}

func (m *ResizeResponse) Reset()      { *m = ResizeResponse{} }
func (*ResizeResponse) ProtoMessage() {}
func (*ResizeResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_c71a6b2c39852c39, []int{2}
}
func (m *ResizeResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ResizeResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ResizeResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ResizeResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ResizeResponse.Merge(m, src)
}
func (m *ResizeResponse) XXX_Size() int {
	return m.Size()
}
func (m *ResizeResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_ResizeResponse.DiscardUnknown(m)
}

var xxx_messageInfo_ResizeResponse proto.InternalMessageInfo

func (m *ResizeResponse) GetRows() uint32 {
	if m != nil {
		return m.Rows
	}
	return 0
}

func (m *ResizeResponse) GetColumns() uint32 {
	if m != nil {
		return m.Columns
	}
	return 0
}

func (m *ResizeResponse) GetX() uint32 {
	if m != nil {
		return m.X
	}
	return 0
}

func (m *ResizeResponse) GetY() uint32 {
	if m != nil {
		return m.Y
	}
	return 0
}

type AcquireRequest struct {
}

func (m *AcquireRequest) Reset()      { *m = AcquireRequest{} }
func (*AcquireRequest) ProtoMessage() {}
func (*AcquireRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_c71a6b2c39852c39, []int{3}
}
func (m *AcquireRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AcquireRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_AcquireRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *AcquireRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AcquireRequest.Merge(m, src)
}
func (m *AcquireRequest) XXX_Size() int {
	return m.Size()
}
func (m *AcquireRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_AcquireRequest.DiscardUnknown(m)
}

var xxx_messageInfo_AcquireRequest proto.InternalMessageInfo

type AcquireResponse struct {
}

func (m *AcquireResponse) Reset()      { *m = AcquireResponse{} }
func (*AcquireResponse) ProtoMessage() {}
func (*AcquireResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_c71a6b2c39852c39, []int{4}
}
func (m *AcquireResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AcquireResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_AcquireResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *AcquireResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AcquireResponse.Merge(m, src)
}
func (m *AcquireResponse) XXX_Size() int {
	return m.Size()
}
func (m *AcquireResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_AcquireResponse.DiscardUnknown(m)
}

var xxx_messageInfo_AcquireResponse proto.InternalMessageInfo

type ReleaseRequest struct {
}

func (m *ReleaseRequest) Reset()      { *m = ReleaseRequest{} }
func (*ReleaseRequest) ProtoMessage() {}
func (*ReleaseRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_c71a6b2c39852c39, []int{5}
}
func (m *ReleaseRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ReleaseRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ReleaseRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ReleaseRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ReleaseRequest.Merge(m, src)
}
func (m *ReleaseRequest) XXX_Size() int {
	return m.Size()
}
func (m *ReleaseRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_ReleaseRequest.DiscardUnknown(m)
}

var xxx_messageInfo_ReleaseRequest proto.InternalMessageInfo

type ReleaseResponse struct {
}

func (m *ReleaseResponse) Reset()      { *m = ReleaseResponse{} }
func (*ReleaseResponse) ProtoMessage() {}
func (*ReleaseResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_c71a6b2c39852c39, []int{6}
}
func (m *ReleaseResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ReleaseResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ReleaseResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ReleaseResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ReleaseResponse.Merge(m, src)
}
func (m *ReleaseResponse) XXX_Size() int {
	return m.Size()
}
func (m *ReleaseResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_ReleaseResponse.DiscardUnknown(m)
}

var xxx_messageInfo_ReleaseResponse proto.InternalMessageInfo

func init() {
	proto.RegisterType((*BytesMessage)(nil), "moby.ttyproxy.v1.BytesMessage")
	proto.RegisterType((*ResizeRequest)(nil), "moby.ttyproxy.v1.ResizeRequest")
	proto.RegisterType((*ResizeResponse)(nil), "moby.ttyproxy.v1.ResizeResponse")
	proto.RegisterType((*AcquireRequest)(nil), "moby.ttyproxy.v1.AcquireRequest")
	proto.RegisterType((*AcquireResponse)(nil), "moby.ttyproxy.v1.AcquireResponse")
	proto.RegisterType((*ReleaseRequest)(nil), "moby.ttyproxy.v1.ReleaseRequest")
	proto.RegisterType((*ReleaseResponse)(nil), "moby.ttyproxy.v1.ReleaseResponse")
}

func init() { proto.RegisterFile("ttyproxy.proto", fileDescriptor_c71a6b2c39852c39) }

var fileDescriptor_c71a6b2c39852c39 = []byte{
	// 340 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x84, 0x92, 0xbf, 0x4e, 0x02, 0x41,
	0x10, 0xc6, 0x6f, 0x10, 0x81, 0x4c, 0xf8, 0xe7, 0x56, 0x17, 0x8a, 0x11, 0xaf, 0xa2, 0xba, 0xa0,
	0xf6, 0x26, 0xd2, 0x1a, 0x88, 0xb9, 0xd0, 0x48, 0x77, 0xe0, 0xc6, 0x90, 0x00, 0x0b, 0xb7, 0x87,
	0x72, 0x56, 0x3e, 0x82, 0x8f, 0xe1, 0x93, 0x18, 0x4b, 0x4a, 0x4a, 0x59, 0x1a, 0x4b, 0x1e, 0xc1,
	0xb0, 0x0b, 0x17, 0x40, 0xd4, 0x6e, 0xe6, 0xdb, 0x6f, 0x66, 0x76, 0x7e, 0xbb, 0x98, 0x0f, 0xc3,
	0x68, 0x18, 0x88, 0x49, 0xe4, 0x0e, 0x03, 0x11, 0x0a, 0x56, 0xec, 0x8b, 0x76, 0xe4, 0xc6, 0xe2,
	0xe3, 0xb9, 0xe3, 0x60, 0xb6, 0x16, 0x85, 0x5c, 0xd6, 0xb9, 0x94, 0xfe, 0x03, 0x67, 0x0c, 0x93,
	0xf7, 0x7e, 0xe8, 0xdb, 0x50, 0x86, 0x4a, 0xd6, 0xd3, 0xb1, 0x53, 0xc0, 0x9c, 0xc7, 0x65, 0xf7,
	0x99, 0x7b, 0x7c, 0x34, 0xe6, 0x32, 0x74, 0x5a, 0x98, 0xdf, 0x08, 0x72, 0x28, 0x06, 0x52, 0x97,
	0x05, 0xe2, 0x49, 0xea, 0xb2, 0x9c, 0xa7, 0x63, 0x66, 0x63, 0xba, 0x23, 0x7a, 0xe3, 0xfe, 0x40,
	0xda, 0x09, 0x2d, 0x6f, 0x52, 0x96, 0x45, 0x98, 0xd8, 0x47, 0x5a, 0x83, 0xc9, 0x2a, 0x8b, 0xec,
	0xa4, 0xc9, 0x22, 0xa7, 0x88, 0xf9, 0xeb, 0xce, 0x68, 0xdc, 0x0d, 0xe2, 0x69, 0x27, 0x58, 0x88,
	0x15, 0x33, 0x6e, 0x65, 0xf2, 0x78, 0x8f, 0xfb, 0x72, 0xdb, 0x14, 0x2b, 0xc6, 0x74, 0xf1, 0x9e,
	0xc0, 0x4c, 0xb3, 0x79, 0x77, 0xbb, 0x5a, 0x95, 0xdd, 0xe0, 0xb1, 0x09, 0xc8, 0xdd, 0x67, 0xe0,
	0x6e, 0x03, 0x28, 0xfd, 0x73, 0x5e, 0x81, 0x2a, 0xb0, 0x3a, 0xa6, 0xcc, 0xfe, 0xec, 0xf4, 0xa7,
	0x7b, 0x07, 0x55, 0xa9, 0xfc, 0xbb, 0xc1, 0x5c, 0xb3, 0x0a, 0xac, 0x81, 0xe9, 0xf5, 0x82, 0xec,
	0x80, 0x7d, 0x97, 0x46, 0xe9, 0xec, 0x0f, 0xc7, 0xfa, 0x31, 0x1a, 0x98, 0x5e, 0xb3, 0x60, 0x07,
	0xc7, 0x6f, 0x83, 0x3b, 0xd4, 0x6f, 0x0f, 0x64, 0xed, 0x6a, 0x3a, 0x27, 0x6b, 0x36, 0x27, 0x6b,
	0x39, 0x27, 0x78, 0x51, 0x04, 0x6f, 0x8a, 0xe0, 0x43, 0x11, 0x4c, 0x15, 0xc1, 0xa7, 0x22, 0xf8,
	0x52, 0x64, 0x2d, 0x15, 0xc1, 0xeb, 0x82, 0xac, 0xe9, 0x82, 0xac, 0xd9, 0x82, 0xac, 0x56, 0x66,
	0xd3, 0xb2, 0x9d, 0xd2, 0x9f, 0xef, 0xf2, 0x3b, 0x00, 0x00, 0xff, 0xff, 0x69, 0x56, 0x4a, 0xe1,
	0x8e, 0x02, 0x00, 0x00,
}

func (this *BytesMessage) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*BytesMessage)
	if !ok {
		that2, ok := that.(BytesMessage)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !bytes.Equal(this.Data, that1.Data) {
		return false
	}
	return true
}
func (this *ResizeRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ResizeRequest)
	if !ok {
		that2, ok := that.(ResizeRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	return true
}
func (this *ResizeResponse) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ResizeResponse)
	if !ok {
		that2, ok := that.(ResizeResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Rows != that1.Rows {
		return false
	}
	if this.Columns != that1.Columns {
		return false
	}
	if this.X != that1.X {
		return false
	}
	if this.Y != that1.Y {
		return false
	}
	return true
}
func (this *AcquireRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*AcquireRequest)
	if !ok {
		that2, ok := that.(AcquireRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	return true
}
func (this *AcquireResponse) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*AcquireResponse)
	if !ok {
		that2, ok := that.(AcquireResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	return true
}
func (this *ReleaseRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ReleaseRequest)
	if !ok {
		that2, ok := that.(ReleaseRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	return true
}
func (this *ReleaseResponse) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ReleaseResponse)
	if !ok {
		that2, ok := that.(ReleaseResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	return true
}
func (this *BytesMessage) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&ttyproxy.BytesMessage{")
	s = append(s, "Data: "+fmt.Sprintf("%#v", this.Data)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *ResizeRequest) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 4)
	s = append(s, "&ttyproxy.ResizeRequest{")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *ResizeResponse) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 8)
	s = append(s, "&ttyproxy.ResizeResponse{")
	s = append(s, "Rows: "+fmt.Sprintf("%#v", this.Rows)+",\n")
	s = append(s, "Columns: "+fmt.Sprintf("%#v", this.Columns)+",\n")
	s = append(s, "X: "+fmt.Sprintf("%#v", this.X)+",\n")
	s = append(s, "Y: "+fmt.Sprintf("%#v", this.Y)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *AcquireRequest) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 4)
	s = append(s, "&ttyproxy.AcquireRequest{")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *AcquireResponse) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 4)
	s = append(s, "&ttyproxy.AcquireResponse{")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *ReleaseRequest) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 4)
	s = append(s, "&ttyproxy.ReleaseRequest{")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *ReleaseResponse) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 4)
	s = append(s, "&ttyproxy.ReleaseResponse{")
	s = append(s, "}")
	return strings.Join(s, "")
}
func valueToGoStringTtyproxy(v interface{}, typ string) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("func(v %v) *%v { return &v } ( %#v )", typ, typ, pv)
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// TTYProxyClient is the client API for TTYProxy service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type TTYProxyClient interface {
	// backwards: buildctl is the server, buildkitd is client and will send output
	// (stdout, stderr), buildctl will "return" input (stdin)
	Proxy(ctx context.Context, opts ...grpc.CallOption) (TTYProxy_ProxyClient, error)
	Resize(ctx context.Context, in *ResizeRequest, opts ...grpc.CallOption) (TTYProxy_ResizeClient, error)
	// there is only one tty, the server will need to Aquire and Release it.
	// If parallel solves attempt to Aquire the tty then one will win and
	// all others will block until it has been Released.
	Acquire(ctx context.Context, in *AcquireRequest, opts ...grpc.CallOption) (*AcquireResponse, error)
	Release(ctx context.Context, in *ReleaseRequest, opts ...grpc.CallOption) (*ReleaseResponse, error)
}

type tTYProxyClient struct {
	cc *grpc.ClientConn
}

func NewTTYProxyClient(cc *grpc.ClientConn) TTYProxyClient {
	return &tTYProxyClient{cc}
}

func (c *tTYProxyClient) Proxy(ctx context.Context, opts ...grpc.CallOption) (TTYProxy_ProxyClient, error) {
	stream, err := c.cc.NewStream(ctx, &_TTYProxy_serviceDesc.Streams[0], "/moby.ttyproxy.v1.TTYProxy/Proxy", opts...)
	if err != nil {
		return nil, err
	}
	x := &tTYProxyProxyClient{stream}
	return x, nil
}

type TTYProxy_ProxyClient interface {
	Send(*BytesMessage) error
	Recv() (*BytesMessage, error)
	grpc.ClientStream
}

type tTYProxyProxyClient struct {
	grpc.ClientStream
}

func (x *tTYProxyProxyClient) Send(m *BytesMessage) error {
	return x.ClientStream.SendMsg(m)
}

func (x *tTYProxyProxyClient) Recv() (*BytesMessage, error) {
	m := new(BytesMessage)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *tTYProxyClient) Resize(ctx context.Context, in *ResizeRequest, opts ...grpc.CallOption) (TTYProxy_ResizeClient, error) {
	stream, err := c.cc.NewStream(ctx, &_TTYProxy_serviceDesc.Streams[1], "/moby.ttyproxy.v1.TTYProxy/Resize", opts...)
	if err != nil {
		return nil, err
	}
	x := &tTYProxyResizeClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type TTYProxy_ResizeClient interface {
	Recv() (*ResizeResponse, error)
	grpc.ClientStream
}

type tTYProxyResizeClient struct {
	grpc.ClientStream
}

func (x *tTYProxyResizeClient) Recv() (*ResizeResponse, error) {
	m := new(ResizeResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *tTYProxyClient) Acquire(ctx context.Context, in *AcquireRequest, opts ...grpc.CallOption) (*AcquireResponse, error) {
	out := new(AcquireResponse)
	err := c.cc.Invoke(ctx, "/moby.ttyproxy.v1.TTYProxy/Acquire", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tTYProxyClient) Release(ctx context.Context, in *ReleaseRequest, opts ...grpc.CallOption) (*ReleaseResponse, error) {
	out := new(ReleaseResponse)
	err := c.cc.Invoke(ctx, "/moby.ttyproxy.v1.TTYProxy/Release", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// TTYProxyServer is the server API for TTYProxy service.
type TTYProxyServer interface {
	// backwards: buildctl is the server, buildkitd is client and will send output
	// (stdout, stderr), buildctl will "return" input (stdin)
	Proxy(TTYProxy_ProxyServer) error
	Resize(*ResizeRequest, TTYProxy_ResizeServer) error
	// there is only one tty, the server will need to Aquire and Release it.
	// If parallel solves attempt to Aquire the tty then one will win and
	// all others will block until it has been Released.
	Acquire(context.Context, *AcquireRequest) (*AcquireResponse, error)
	Release(context.Context, *ReleaseRequest) (*ReleaseResponse, error)
}

// UnimplementedTTYProxyServer can be embedded to have forward compatible implementations.
type UnimplementedTTYProxyServer struct {
}

func (*UnimplementedTTYProxyServer) Proxy(srv TTYProxy_ProxyServer) error {
	return status.Errorf(codes.Unimplemented, "method Proxy not implemented")
}
func (*UnimplementedTTYProxyServer) Resize(req *ResizeRequest, srv TTYProxy_ResizeServer) error {
	return status.Errorf(codes.Unimplemented, "method Resize not implemented")
}
func (*UnimplementedTTYProxyServer) Acquire(ctx context.Context, req *AcquireRequest) (*AcquireResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Acquire not implemented")
}
func (*UnimplementedTTYProxyServer) Release(ctx context.Context, req *ReleaseRequest) (*ReleaseResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Release not implemented")
}

func RegisterTTYProxyServer(s *grpc.Server, srv TTYProxyServer) {
	s.RegisterService(&_TTYProxy_serviceDesc, srv)
}

func _TTYProxy_Proxy_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(TTYProxyServer).Proxy(&tTYProxyProxyServer{stream})
}

type TTYProxy_ProxyServer interface {
	Send(*BytesMessage) error
	Recv() (*BytesMessage, error)
	grpc.ServerStream
}

type tTYProxyProxyServer struct {
	grpc.ServerStream
}

func (x *tTYProxyProxyServer) Send(m *BytesMessage) error {
	return x.ServerStream.SendMsg(m)
}

func (x *tTYProxyProxyServer) Recv() (*BytesMessage, error) {
	m := new(BytesMessage)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _TTYProxy_Resize_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(ResizeRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(TTYProxyServer).Resize(m, &tTYProxyResizeServer{stream})
}

type TTYProxy_ResizeServer interface {
	Send(*ResizeResponse) error
	grpc.ServerStream
}

type tTYProxyResizeServer struct {
	grpc.ServerStream
}

func (x *tTYProxyResizeServer) Send(m *ResizeResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _TTYProxy_Acquire_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AcquireRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TTYProxyServer).Acquire(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/moby.ttyproxy.v1.TTYProxy/Acquire",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TTYProxyServer).Acquire(ctx, req.(*AcquireRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TTYProxy_Release_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReleaseRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TTYProxyServer).Release(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/moby.ttyproxy.v1.TTYProxy/Release",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TTYProxyServer).Release(ctx, req.(*ReleaseRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _TTYProxy_serviceDesc = grpc.ServiceDesc{
	ServiceName: "moby.ttyproxy.v1.TTYProxy",
	HandlerType: (*TTYProxyServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Acquire",
			Handler:    _TTYProxy_Acquire_Handler,
		},
		{
			MethodName: "Release",
			Handler:    _TTYProxy_Release_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Proxy",
			Handler:       _TTYProxy_Proxy_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
		{
			StreamName:    "Resize",
			Handler:       _TTYProxy_Resize_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "ttyproxy.proto",
}

func (m *BytesMessage) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *BytesMessage) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *BytesMessage) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Data) > 0 {
		i -= len(m.Data)
		copy(dAtA[i:], m.Data)
		i = encodeVarintTtyproxy(dAtA, i, uint64(len(m.Data)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ResizeRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ResizeRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ResizeRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *ResizeResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ResizeResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ResizeResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Y != 0 {
		i = encodeVarintTtyproxy(dAtA, i, uint64(m.Y))
		i--
		dAtA[i] = 0x20
	}
	if m.X != 0 {
		i = encodeVarintTtyproxy(dAtA, i, uint64(m.X))
		i--
		dAtA[i] = 0x18
	}
	if m.Columns != 0 {
		i = encodeVarintTtyproxy(dAtA, i, uint64(m.Columns))
		i--
		dAtA[i] = 0x10
	}
	if m.Rows != 0 {
		i = encodeVarintTtyproxy(dAtA, i, uint64(m.Rows))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *AcquireRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AcquireRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AcquireRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *AcquireResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AcquireResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AcquireResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *ReleaseRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ReleaseRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ReleaseRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *ReleaseResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ReleaseResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ReleaseResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func encodeVarintTtyproxy(dAtA []byte, offset int, v uint64) int {
	offset -= sovTtyproxy(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *BytesMessage) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Data)
	if l > 0 {
		n += 1 + l + sovTtyproxy(uint64(l))
	}
	return n
}

func (m *ResizeRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *ResizeResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Rows != 0 {
		n += 1 + sovTtyproxy(uint64(m.Rows))
	}
	if m.Columns != 0 {
		n += 1 + sovTtyproxy(uint64(m.Columns))
	}
	if m.X != 0 {
		n += 1 + sovTtyproxy(uint64(m.X))
	}
	if m.Y != 0 {
		n += 1 + sovTtyproxy(uint64(m.Y))
	}
	return n
}

func (m *AcquireRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *AcquireResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *ReleaseRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *ReleaseResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func sovTtyproxy(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozTtyproxy(x uint64) (n int) {
	return sovTtyproxy(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (this *BytesMessage) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&BytesMessage{`,
		`Data:` + fmt.Sprintf("%v", this.Data) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ResizeRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ResizeRequest{`,
		`}`,
	}, "")
	return s
}
func (this *ResizeResponse) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ResizeResponse{`,
		`Rows:` + fmt.Sprintf("%v", this.Rows) + `,`,
		`Columns:` + fmt.Sprintf("%v", this.Columns) + `,`,
		`X:` + fmt.Sprintf("%v", this.X) + `,`,
		`Y:` + fmt.Sprintf("%v", this.Y) + `,`,
		`}`,
	}, "")
	return s
}
func (this *AcquireRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&AcquireRequest{`,
		`}`,
	}, "")
	return s
}
func (this *AcquireResponse) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&AcquireResponse{`,
		`}`,
	}, "")
	return s
}
func (this *ReleaseRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ReleaseRequest{`,
		`}`,
	}, "")
	return s
}
func (this *ReleaseResponse) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ReleaseResponse{`,
		`}`,
	}, "")
	return s
}
func valueToStringTtyproxy(v interface{}) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("*%v", pv)
}
func (m *BytesMessage) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTtyproxy
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: BytesMessage: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: BytesMessage: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Data", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTtyproxy
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthTtyproxy
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthTtyproxy
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Data = append(m.Data[:0], dAtA[iNdEx:postIndex]...)
			if m.Data == nil {
				m.Data = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTtyproxy(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTtyproxy
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTtyproxy
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ResizeRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTtyproxy
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ResizeRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ResizeRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTtyproxy(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTtyproxy
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTtyproxy
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ResizeResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTtyproxy
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ResizeResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ResizeResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Rows", wireType)
			}
			m.Rows = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTtyproxy
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Rows |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Columns", wireType)
			}
			m.Columns = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTtyproxy
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Columns |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field X", wireType)
			}
			m.X = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTtyproxy
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.X |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Y", wireType)
			}
			m.Y = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTtyproxy
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Y |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipTtyproxy(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTtyproxy
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTtyproxy
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AcquireRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTtyproxy
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AcquireRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AcquireRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTtyproxy(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTtyproxy
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTtyproxy
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AcquireResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTtyproxy
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AcquireResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AcquireResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTtyproxy(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTtyproxy
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTtyproxy
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ReleaseRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTtyproxy
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ReleaseRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ReleaseRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTtyproxy(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTtyproxy
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTtyproxy
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ReleaseResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTtyproxy
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ReleaseResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ReleaseResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTtyproxy(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTtyproxy
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTtyproxy
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipTtyproxy(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowTtyproxy
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTtyproxy
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTtyproxy
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthTtyproxy
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupTtyproxy
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthTtyproxy
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthTtyproxy        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowTtyproxy          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupTtyproxy = fmt.Errorf("proto: unexpected end of group")
)
